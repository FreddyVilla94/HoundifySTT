buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
    }
}

allprojects {
    repositories {
        jcenter()
    }
}

apply plugin: 'com.android.application'

android {       
    compileSdkVersion 22
    buildToolsVersion "21.1.2"

    defaultConfig {
        applicationId "com.soundhound.android.houndify.sample"
        minSdkVersion 16
        targetSdkVersion 22
        versionCode 222
        versionName "0.2.22"
    }
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    signingConfigs {
        debug {
            storeFile file("debug.keystore")
        }
    }
    
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/LGPL2.1'
    }
}

repositories {
    maven {
        url 'https://houndify.com/maven/'
    }
}

dependencies {
    if (project.hasProperty('USE_LOCAL_HOUND_PROJECTS') && USE_LOCAL_HOUND_PROJECTS == "true") {
        // For SoundHound internal use, use standard include method below
        compile project(':houndify_sdk_libraries:hound_sdk')
    }
    else {
        //** Standard method for including hound-sdk into a project
        compile('hound.android:hound-sdk:' + '0.2.21' + '@aar') {
            transitive = true
        }
    }
    // Include the phrase spotter
    compile('hound.android:phrasespotter:1.6.0') {
        transitive = true
    }
}

task packageAll (type: Zip) {
    baseName = 'houndify-sdk-sample'
    version = android.defaultConfig.versionName

    from(projectDir)
    into('')

    exclude 'build'
    exclude 'sample.iml'
    exclude '.idea'
    exclude '.gradle'
    exclude 'local.properties'
}

/** This part is no longer needed since the houndify.com maven repository no longer requires a username/password **

// To keep our houndify credentials out of source control, we pass them in as a properties file or as environmental variables.

// Be sure not to check in your Houndify username and password to your source control!
boolean propertyFileHasHoundifyUsername = false;
if (project.hasProperty("houndifyProperties")) {
    File propFile = file(houndifyProperties)
    if (propFile.exists()) {
        Properties p = new Properties()
        p.load(new FileInputStream(propFile))
        if ( p.username != null ) {
            propertyFileHasHoundifyUsername = true;
            println "Using " + houndifyProperties + " for houndify repo"
            setHoundifyMavenCredentials(p.username, p.password)
        }
    }
    else {
        throw new FileNotFoundException("Unable to find houndifyMavenProperties file at " + signingProperties)
    }
}

if ( propertyFileHasHoundifyUsername == false && System.getenv("HOUNDIFY_USERNAME") != null && System.getenv("HOUNDIFY_PASSWORD")) {
    println "Using environmental variables for houndify repo"
    setHoundifyMavenCredentials(System.getenv("HOUNDIFY_USERNAME"), System.getenv("HOUNDIFY_PASSWORD"))
}
else if( propertyFileHasHoundifyUsername == false ){
    throw new IllegalStateException("You must specify the houndify repos credentials either in the houndify.properties file or as environmental variables")
}

// Sets the username and password for the houndify repository
def setHoundifyMavenCredentials(username, password) {
    for (repo in repositories) {
        if (repo.properties.url.toString().equals("https://houndify.com/maven/")) {
            repo.properties.credentials.username = username
            repo.properties.credentials.password = password
        }
    }
}
*/
